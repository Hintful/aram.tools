version: '3.8'

services:
  mysqldb:
    image: mysql
    restart: always
    env_file: .env
    volumes:
      - "./setup.sql:/docker-entrypoint-initdb.d/setup.sql"
    environment:
      - DB_USER=$MYSQLDB_USER
      - MYSQL_DATABASE=$MYSQLDB_DATABASE
      - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - MYSQL_PASSWORD=$MYSQLDB_ROOT_PASSWORD
    ports:
      - $MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT
    expose:
      - $MYSQLDB_LOCAL_PORT
    networks:
      - internalnet

  nginx:
    depends_on:
      - api
      - client
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - $NGINX_LOCAL_PORT:$NGINX_DOCKER_PORT
    networks:
      - internalnet

  api:
    depends_on:
      - mysqldb
    image: nodeap:v1
    build:
      context: ./webserver
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: .env
    ports:
      - $NODE_LOCAL_PORT:$NODE_DOCKER_PORT
    volumes:
      - /server/node_modules
      - ./webserver:/server
    expose:
      - $NODE_LOCAL_PORT
    environment:
      - DB_HOST=$MYSQLDB_HOST
      - DB_USER=$MYSQLDB_USER
      - DB_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - DB_NAME=$MYSQLDB_DATABASE
      - DB_PORT=$MYSQLDB_DOCKER_PORT
    networks:
      - internalnet

  client:
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    build:
      dockerfile: Dockerfile
      context: ./app
    ports:
      - $REACT_LOCAL_PORT:$REACT_DOCKER_PORT
    volumes:
      - /app/node_modules
      - ./app:/app
    networks:
      - internalnet

  adminer:
      image: adminer:latest
      restart: unless-stopped
      ports:
        - 8000:8080
      depends_on:
        - mysqldb
      environment:
        ADMINER_DEFAULT_SERVER: mysqldb
      networks:
        - internalnet

networks:
  internalnet:
    driver: bridge